import streamlit as st
import pandas as pd
import random
from datetime import datetime, timedelta
from deepface import DeepFace
import numpy as np
import cv2

st.title("AI MindShield Emotion Dashboard")

uploaded_file = st.file_uploader("Upload your emotion_logs.csv from Android app", type=["csv"])

if uploaded_file:
    df = pd.read_csv(uploaded_file)
    df['timestamp'] = pd.to_datetime(df['timestamp'])
    st.write("### Emotion Logs")
    st.dataframe(df)

    st.write("### Emotion Distribution")
    st.bar_chart(df['emotion'].value_counts())

    st.write("### Emotions Over Time")
    df = df.set_index('timestamp')
    st.line_chart(df['emotion'].apply(lambda e: {'happy':3, 'neutral':2, 'sad':1, 'angry':0}.get(e, 2)))

else:
    st.info("Upload the 'emotion_logs.csv' file generated by the Android app to see emotion analytics.")

def generate_ai_emotion():
    # This simulates emotion detection by analyzing a dummy image with DeepFace
    emotions = ['happy', 'neutral', 'sad', 'angry']
    genders = ['Male', 'Female']
    mentalities = {
        'happy': 'Calm & Productive',
        'neutral': 'Stable & Observant',
        'sad': 'Distracted & Low Mood',
        'angry': 'Aggressive & Risky'
    }
    rows = []
    start_time = datetime.now() - timedelta(hours=1)
    
    # Generate 30 data points with random emotions using DeepFace model on a dummy face
    for i in range(30):
        time = start_time + timedelta(minutes=i * 2)
        
        # Use DeepFace analyze on a dummy face (black image) to get emotion probabilities
        dummy_face = np.zeros((48, 48, 3), dtype=np.uint8)
        try:
            analysis = DeepFace.analyze(img_path = dummy_face, actions=['emotion'], enforce_detection=False)
            # Get dominant emotion from analysis
            detected_emotion = analysis[0]['dominant_emotion']
            if detected_emotion not in emotions:
                detected_emotion = random.choice(emotions)
        except Exception:
            detected_emotion = random.choice(emotions)

        gender = random.choice(genders)
        mentality = mentalities[detected_emotion]

        rows.append({
            'timestamp': time.strftime('%Y-%m-%d %H:%M:%S'),
            'gender': gender,
            'emotion': detected_emotion,
            'mentality': mentality
        })
        
    df_ai = pd.DataFrame(rows)
    df_ai.to_csv("emotion_logs_ai.csv", index=False)
    st.success("AI-generated emotion_logs.csv created!")
    st.dataframe(df_ai)

if st.button("Generate AI-Based Emotion Data"):
    generate_ai_emotion()
